# setup_config.py
"""
Interactive setup script for user configuration
"""

import os
from pathlib import Path

def create_user_config_interactive():
    """Interactive setup to create user configuration file."""
    print("🚀 Job Search System - Configuration Setup")
    print("=" * 50)
    print("This will help you create your personal configuration file.")
    print("Press Enter to skip optional fields.\n")
    
    config_lines = [
        "# Job Search System - User Configuration",
        "# Generated by setup script",
        "",
        "# PERSONAL INFORMATION"
    ]
    
    # Personal information
    cv_path = input("📄 Path to your CV file (optional): ").strip()
    if cv_path:
        config_lines.append(f"CV_FILE_PATH={cv_path}")
    
    linkedin = input("🔗 LinkedIn profile URL (optional): ").strip()
    if linkedin:
        config_lines.append(f"LINKEDIN_PROFILE={linkedin}")
    
    email = input("📧 Your email (optional): ").strip()
    if email:
        config_lines.append(f"EMAIL={email}")
    
    config_lines.extend(["", "# JOB SEARCH PREFERENCES"])
    
    # Interests
    print("\n🎯 What are your main interests? (e.g., Machine Learning, Data Science)")
    interests = input("Interests (comma-separated): ").strip()
    if not interests:
        interests = "Scientific Computing"
        print(f"Using default: {interests}")
    config_lines.append(f"USER_INTERESTS={interests}")
    
    # Geographic focus
    print("\n🌍 Where do you want to work?")
    geographic_focus = input("Countries (comma-separated, default: Netherlands): ").strip()
    if not geographic_focus:
        geographic_focus = "Netherlands"
    config_lines.append(f"GEOGRAPHIC_FOCUS={geographic_focus}")
    
    config_lines.extend(["", "# COMPANIES OF INTEREST"])
    
    # Companies of interest
    print("\n🏢 Any specific companies you're interested in?")
    companies_interest = input("Companies of interest (comma-separated, optional): ").strip()
    if companies_interest:
        config_lines.append(f"COMPANIES_OF_INTEREST={companies_interest}")
    
    # Companies to exclude
    print("\n🚫 Any companies you want to exclude?")
    companies_exclude = input("Companies to exclude (comma-separated, optional): ").strip()
    if companies_exclude:
        config_lines.append(f"COMPANIES_TO_EXCLUDE={companies_exclude}")
    
    # Add default settings
    config_lines.extend([
        "",
        "# SEARCH PREFERENCES",
        "INSTITUTION_TYPES=universities, companies, startups, research_institutes, government_agencies",
        "SEARCH_LOCATION=Europe",
        "SEARCH_LOCALE=en-GB",
        "MAX_RESULTS_PER_SEARCH=10",
        "",
        "# OUTPUT PREFERENCES",
        "OUTPUT_FILENAME=my_job_research_results.csv",
        "VERBOSE_OUTPUT=false"
    ])
    
    # Write configuration file
    config_dir = Path("config")
    config_dir.mkdir(exist_ok=True)
    
    config_file = config_dir / "user_config.txt"
    with open(config_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(config_lines))
    
    print(f"\n✅ Configuration saved to: {config_file}")
    print("\n📝 You can edit this file directly to make changes.")
    print("🚀 Now run: python main.py")

def check_existing_config():
    """Check if configuration already exists."""
    config_file = Path("config/user_config.txt")
    if config_file.exists():
        print("📋 Configuration file already exists!")
        response = input("Do you want to recreate it? (y/N): ").strip().lower()
        return response in ('y', 'yes')
    return True

if __name__ == "__main__":
    if check_existing_config():
        create_user_config_interactive()
    else:
        print("Configuration setup cancelled.")